"This is a thermistor and radiometer temperature probe test code composite"


from labjack import ljm
import datetime
import os
import sys
import time

handle = ljm.openS("T7", "ANY", "ANY")
info = ljm.getHandleInfo(handle)
#print(\"nOpened a LabJack with device type %i, connection type %i,\n" "Serial number %i, IP address %s, Port %i,\nMax bytes per MB %i" %(info[0], info[1], info[2], ljm.numberToIP(info[3]),info[4],info[5]))
name0 = "AIN0"
name1 = "AIN1"
name2 = "AIN2"
numIterations = 100000


rate = 1000 #in ms
rateUS = rate*1000

cwd = os.getcwd()

intervalHandle = 0
ljm.startInterval(intervalHandle, rateUS)
curIteration = 0
numSkippedIntervals = 0
import numpy as np
lastTick = ljm.getHostTick()
duration = 0




while curIteration < numIterations:
    try:
        numSkippedIntervals = ljm.waitForNextInterval(intervalHandle)
        curTick = ljm.getHostTick()
        duration = (curTick - lastTick)/1000
        result0 = ljm.eReadName(handle, name0)
        result1 = ljm.eReadName(handle, name1)
        result2 = ljm.eReadName(handle, name2)
        ADC = 262144
        resistance0 = -(10000*result0)/(result0-3.3)
        invTemp = 1/(298.15)+1/(3950)*np.log(resistance0/10000)
        Temp0K = 1/invTemp
        Temp0C = Temp0K - 273.15
        Resistance1 = (result1)/(result1 - 5)
        CurrentOut1 = result1/10000 #ohms
        TempOutC1 = (25/0.0002982)*CurrentOut1 + 25
        Resistance2 = (result2)/(result2 - 5)
        CurrentOut2 = result2/10000 #ohms
        TempOutC2 = (25/0.0002982)*CurrentOut2 + 25
        print("%s reading: %f V, %f Ohms, %f C,  duration: %0.1f ms,  --skipped intervals: %i" %(name0, result0, resistance0, Temp0C, duration, numSkippedIntervals))
        print("%s reading: %f V, %f C, duration: %0.1f ms,  --skipped intervals: %i" %(name1, result1, TempOutC1, duration, numSkippedIntervals))
        print("%s reading: %f V, %f C, duration: %0.1f ms,  --skipped intervals: %i" %(name2, result2, TempOutC2, duration, numSkippedIntervals))
        #f.write("%s, %0.1f, %0.3f\r\n" %(curTimeStr, duration, result))
        lastTick = curTick
        curIteration = curIteration + 1
    except KeyboardInterrupt:
        break
    except Exception:
        import sys
        print(sys.exc_info()[1])
        break
print("\nFinished")
